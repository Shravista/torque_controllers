#ifndef _TORQUE_CONTROLLER_HPP_
#define _TORQUE_CONTROLLER_HPP_

#include <memory>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "hardware_interface/loaned_command_interface.hpp"
#include "hardware_interface/loaned_state_interface.hpp"
#include "torque_controller/visibility_controller.h"
#include "torque_msgs/msg/commands.hpp"
#include "rclcpp/subscription.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.h"
#include "sensor_msgs/msg/joint_state.hpp"

#include "eigen3/Eigen/Eigen"
#include <chrono>
#include "pinocchio/algorithm/rnea.hpp"
#include "pinocchio/parsers/urdf.hpp" 
#include "pinocchio/multibody/data.hpp"
#include "pinocchio/algorithm/joint-configuration.hpp" 
#include "pinocchio/serialization/model.hpp"
#include "pinocchio/algorithm/crba.hpp"

/* Auto generated by the library*/
#include "torque_controller_parameters.hpp"

namespace torque_controller{
using torqueCmd = torque_msgs::msg::Commands;
using stateMsg = sensor_msgs::msg::JointState;

class TorqueController : public controller_interface::ControllerInterface {
    public:
        TORQUE_CONTROLLER_PUBLIC TorqueController();
        TORQUE_CONTROLLER_PUBLIC ~TorqueController() = default;

        TORQUE_CONTROLLER_PUBLIC 
        controller_interface::InterfaceConfiguration command_interface_configuration() const override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_init() override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

        TORQUE_CONTROLLER_PUBLIC
        controller_interface::return_type update(const rclcpp::Time& time, const rclcpp::Duration& period) override;
    
    protected:
        // functions
        void declare_parameters();
        controller_interface::CallbackReturn read_parameters();
        void sendStaticInput();

        // controller parameters
        std::vector<std::string> _joint_names;
        std::string _interface_name;
        Eigen::MatrixXd _K;
        Eigen::VectorXd _q, _qdot, _u_static;

        // pinocchio
        pinocchio::Model _model;
        pinocchio::Data _data;

        // ros 2
        std::vector<std::string> _command_interface_types, _state_interface_types;
        realtime_tools::RealtimeBuffer<std::shared_ptr<torqueCmd>> _rt_torque_command_ptr;
        realtime_tools::RealtimeBuffer<std::shared_ptr<stateMsg>> _rt_state_ptr;
        rclcpp::Subscription<torqueCmd>::SharedPtr _torque_commands_subs;
        // rclcpp::Subscription<stateMsg>::SharedPtr _state_subs;

        // interfaces
        std::vector<std::reference_wrapper<hardware_interface::LoanedCommandInterface>> _cmd_interfaces;
    std::vector<std::reference_wrapper<hardware_interface::LoanedStateInterface>> _state_interfaces;

        // params
        std::shared_ptr<ParamListener> _param_listener;
        Params _params;
};
} // torque_controller

#endif //_TORQUE_CONTROLLER_HPP_